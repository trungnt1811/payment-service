// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/genefriendway/onchain-handler/conf"
	interfaces2 "github.com/genefriendway/onchain-handler/infra/interfaces"
	"github.com/genefriendway/onchain-handler/internal/adapters/repositories"
	"github.com/genefriendway/onchain-handler/internal/interfaces"
	"github.com/genefriendway/onchain-handler/internal/ucases"
	interfaces3 "github.com/genefriendway/onchain-handler/pkg/interfaces"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// Init ucase
func InitializeBlockStateUCase(db *gorm.DB) interfaces.BlockStateUCase {
	blockStateRepository := repositories.NewBlockstateRepository(db)
	blockStateUCase := ucases.NewBlockStateUCase(blockStateRepository)
	return blockStateUCase
}

func InitializePaymentOrderUCase(db *gorm.DB, cacheRepo interfaces2.CacheRepository, config *conf.Configuration) interfaces.PaymentOrderUCase {
	paymentOrderRepository := repositories.NewPaymentOrderRepository(db)
	paymentWalletRepository := repositories.NewPaymentWalletRepository(db, config)
	blockStateRepository := repositories.NewBlockstateRepository(db)
	paymentOrderUCase := ucases.NewPaymentOrderUCase(db, paymentOrderRepository, paymentWalletRepository, blockStateRepository, cacheRepo, config)
	return paymentOrderUCase
}

func InitializeTokenTransferUCase(db *gorm.DB, ethClient interfaces3.Client, config *conf.Configuration) interfaces.TokenTransferUCase {
	tokenTransferRepository := repositories.NewTokenTransferRepository(db)
	tokenTransferUCase := ucases.NewTokenTransferUCase(tokenTransferRepository, ethClient, config)
	return tokenTransferUCase
}

func InitializePaymentEventHistoryUCase(db *gorm.DB) interfaces.PaymentEventHistoryUCase {
	paymentEventHistoryRepository := repositories.NewPaymentEventHistoryRepository(db)
	paymentEventHistoryUCase := ucases.NewPaymentEventHistoryUCase(paymentEventHistoryRepository)
	return paymentEventHistoryUCase
}

func InitializePaymentWalletUCase(db *gorm.DB, config *conf.Configuration) interfaces.PaymentWalletUCase {
	paymentWalletRepository := repositories.NewPaymentWalletRepository(db, config)
	paymentWalletBalanceRepository := repositories.NewPaymentWalletBalanceRepository(db)
	paymentWalletUCase := ucases.NewPaymentWalletUCase(paymentWalletRepository, paymentWalletBalanceRepository)
	return paymentWalletUCase
}

func InitializeUserWalletUCase(db *gorm.DB, config *conf.Configuration) interfaces.UserWalletUCase {
	userWalletRepository := repositories.NewUserWalletRepository(db)
	userWalletUCase := ucases.NewUserWalletUCase(userWalletRepository)
	return userWalletUCase
}

func InitializeNetworkMetadataUCase(db *gorm.DB) interfaces.NetworkMetadataUCase {
	networkMetadataRepository := repositories.NewNetworkMetadataRepository(db)
	networkMetadataUCase := ucases.NewNetworkMetadataUCase(networkMetadataRepository)
	return networkMetadataUCase
}

// wire.go:

// UCase set
var blockStateUCaseSet = wire.NewSet(repositories.NewBlockstateRepository, ucases.NewBlockStateUCase)

var paymentOrderUCaseSet = wire.NewSet(repositories.NewPaymentOrderRepository, repositories.NewPaymentWalletRepository, repositories.NewBlockstateRepository, ucases.NewPaymentOrderUCase)

var tokenTransferUCaseSet = wire.NewSet(repositories.NewTokenTransferRepository, ucases.NewTokenTransferUCase)

var paymentEventHistoryUCaseSet = wire.NewSet(repositories.NewPaymentEventHistoryRepository, ucases.NewPaymentEventHistoryUCase)

var paymentWalletUCaseSet = wire.NewSet(repositories.NewPaymentWalletRepository, repositories.NewPaymentWalletBalanceRepository, ucases.NewPaymentWalletUCase)

var userWalletUCaseSet = wire.NewSet(repositories.NewUserWalletRepository, ucases.NewUserWalletUCase)

var networkMetadataUCaseSet = wire.NewSet(repositories.NewNetworkMetadataRepository, ucases.NewNetworkMetadataUCase)
