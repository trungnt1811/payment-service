// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/payment-orders": {
            "post": {
                "description": "This endpoint allows creating payment orders for users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment-order"
                ],
                "summary": "Create payment orders",
                "parameters": [
                    {
                        "description": "List of payment orders. Each order must include user ID and amount.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PaymentOrderPayloadDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response: {\\\"success\\\": true, \\\"data\\\": []interface{}}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/token-transfer": {
            "post": {
                "description": "This endpoint allows the distribution of tokens to multiple recipients. It accepts a list of transfer requests, validates the payload, and processes the token transfers based on the transaction type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token-transfer"
                ],
                "summary": "Distribute tokens to recipients",
                "parameters": [
                    {
                        "description": "List of transfer requests. Each request must include recipient address and transaction type.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TokenTransferPayloadDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response: {\\\"success\\\": true, \\\"results\\\": [{\\\"request_id\\\": \\\"requestID1\\\", \\\"status\\\": true, \\\"error_message\\\": \\\"\\\"}, {\\\"request_id\\\": \\\"requestID2\\\", \\\"status\\\": false, \\\"error_message\\\": \\\"Failed: some error message\\\"}]}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid payload or invalid recipient address/transaction type",
                        "schema": {
                            "$ref": "#/definitions/utils.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to distribute tokens",
                        "schema": {
                            "$ref": "#/definitions/utils.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/token-transfer/histories": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint fetches a paginated list of token transfer histories filtered by request IDs and time range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token-transfer"
                ],
                "summary": "Get list of token transfer histories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number, default is 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size, default is 10",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of request IDs to filter",
                        "name": "request_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T00:00:00Z\"",
                        "description": "Start time in RFC3339 format to filter example(",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-02-01T00:00:00Z\"",
                        "description": "End time in RFC3339 format to filter example(",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of token transfer histories",
                        "schema": {
                            "$ref": "#/definitions/dto.PaginationDTOResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.GeneralError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.PaginationDTOResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {}
                },
                "next_page": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.PaymentOrderPayloadDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TokenTransferPayloadDTO": {
            "type": "object",
            "properties": {
                "from_address": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                },
                "token_amount": {
                    "type": "string"
                }
            }
        },
        "utils.GeneralError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP error code, or custom error code",
                    "type": "integer"
                },
                "errors": {
                    "description": "List of error send server 2 server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "string": {
                    "description": "Friendly error message",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
