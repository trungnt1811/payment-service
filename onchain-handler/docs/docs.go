// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/membership/events": {
            "get": {
                "description": "This endpoint fetches a list of membership events based on the provided comma-separated list of order IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership"
                ],
                "summary": "Retrieve membership events by order IDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of order IDs",
                        "name": "orderIds",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of membership events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MembershipEventDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Order IDs or missing Order IDs",
                        "schema": {
                            "$ref": "#/definitions/util.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/util.GeneralError"
                        }
                    }
                }
            }
        },
        "/api/v1/transfer": {
            "post": {
                "description": "This endpoint allows the distribution of tokens to multiple recipients. It accepts a list of transfer requests, validates the payload, and processes the token transfers based on the transaction type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transfer"
                ],
                "summary": "Distribute tokens to recipients",
                "parameters": [
                    {
                        "description": "List of transfer requests. Each request must include recipient address and transaction type.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.TransferTokenPayloadDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response: {\\\"success\\\": true}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload or invalid recipient address/transaction type",
                        "schema": {
                            "$ref": "#/definitions/util.GeneralError"
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to distribute tokens",
                        "schema": {
                            "$ref": "#/definitions/util.GeneralError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.MembershipEventDTO": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "end_duration": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "transaction_hash": {
                    "type": "string"
                },
                "user_address": {
                    "type": "string"
                }
            }
        },
        "dto.TransferTokenPayloadDTO": {
            "type": "object",
            "properties": {
                "recipient_address": {
                    "type": "string"
                },
                "token_amount": {
                    "type": "string"
                },
                "tx_type": {
                    "type": "string"
                }
            }
        },
        "util.GeneralError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP error code, or custom error code",
                    "type": "integer"
                },
                "errors": {
                    "description": "List of error send server 2 server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "string": {
                    "description": "Friendly error message",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
